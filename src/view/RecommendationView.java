package view;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import model.Course;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class RecommendationView {
    public void displayWelcomeMessage() {
        System.out.println("--- AGENT T∆Ø V·∫§N L·ªò TR√åNH H·ªåC T·∫¨P (MVC Version) ---");
    }

    public String promptForUserGoal() {
        System.out.println("\nCh√†o b·∫°n, t√¥i l√† Agent t∆∞ v·∫•n. B·∫°n mu·ªën h·ªçc v·ªÅ lƒ©nh v·ª±c g√¨?");
        System.out.println("(V√≠ d·ª•: 'l·∫≠p tr√¨nh AI', 'ph√°t tri·ªÉn web cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu', 'h·ªçc v·ªÅ c∆° s·ªü d·ªØ li·ªáu')");
        return Validation.getString("> ");

    }

    public void displayAnalysisMessage(String userGoal) {
        System.out.printf("\nƒê√£ nh·∫≠n y√™u c·∫ßu: \"%s\".\n", userGoal);
        System.out.println("Agent ƒëang ph√¢n t√≠ch v√† t·∫°o l·ªô tr√¨nh... Vui l√≤ng ch·ªù.");
    }

    public void displayLearningPath(String userGoal, ArrayList<Course> path) {
        System.out.println("\n=======================================================");
        System.out.printf("--- L·ªò TR√åNH ƒê·ªÄ XU·∫§T CHO '%s' ---\n", userGoal.toUpperCase());
        if (path.isEmpty()) {
            System.out.println("Hi·ªán t·∫°i h·ªá th·ªëng ch∆∞a h·ªó tr·ª£ lƒ©nh v·ª±c n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi lƒ©nh v·ª±c kh√°c.");
        } else {
            int step = 1;
            for (Course course : path) {
                System.out.printf("B∆∞·ªõc %d: %s\n", step++, course);
                if (!course.getDescription().isEmpty()) {
                    System.out.print("   üìù T√≥m t·∫Øt:\n");
                    // T√°ch c√°c c√¢u v√† in m·ªói c√¢u tr√™n m·ªôt d√≤ng
                    String[] sentences = course.getDescription().split("(?<=[.!?])\\s+");
                    for (String sentence : sentences) {
                        System.out.println("      " + sentence.trim());
                    }
                }
                System.out.println();
                System.out.print("\n--> B·∫°n c√≥ mu·ªën ƒëƒÉng k√Ω t·∫•t c·∫£ c√°c kh√≥a h·ªçc tr√™n kh√¥ng? (y/n): ");
                String answer = Validation.getString("> ").trim().toLowerCase();

                if (answer.equals("y") || answer.equals("yes")) {
                    String[] days = {"Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6"};
                    String[] hours = {"07:00", "09:00", "13:00", "15:00"};
                    String[] timeSlots = new String[days.length * hours.length];

                    int index = 0;
                    for (String hour : hours) {
                        for (String day : days) {
                            timeSlots[index++] = hour + " " + day;
                        }
                    }

                    Set<String> alreadyRegistered = loadRegisteredCourseIds();
                    Set<String> usedTimeSlots = loadRegisteredTimeSlots();


                    if (alreadyRegistered.contains(course.getCourseId())) {
                        System.out.println("B·∫°n ƒë√£ ƒëƒÉng k√Ω kh√≥a h·ªçc: " + course.getCourseId() + " - " + course.getCourseName() + ". B·ªè qua.");
                        continue;
                    }

                    System.out.println("\nƒêƒÉng k√Ω kh√≥a h·ªçc: " + course.getCourseId() + " - " + course.getCourseName());
                    System.out.println("L·ªãch h·ªçc hi·ªán t·∫°i (X: ƒë√£ ƒë∆∞·ª£c ch·ªçn, O: c√≤n tr·ªëng):");

                    int count = 1;
                    System.out.printf("%-10s", "");
                    for (String day : days) {
                        System.out.printf("%-20s", day);
                    }
                    System.out.println();

                    for (String hour : hours) {
                        System.out.printf("%-10s", hour);
                        for (String day : days) {
                            String slot = hour + " " + day;
                            if (usedTimeSlots.contains(slot)) {
                                System.out.printf("%-20s", count + ". X");
                            } else {
                                System.out.printf("%-20s", count + ". O");
                            }
                            count++;
                        }
                        System.out.println();
                    }

                    int choice = 0;
                    while (choice < 1 || choice > timeSlots.length || usedTimeSlots.contains(timeSlots[choice - 1])) {
                        System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n (1-" + timeSlots.length + ", ch·ªçn s·ªë c√≥ d·∫•u O): ");
                        try {
                            choice = Integer.parseInt(Validation.getString("> "));
                        } catch (NumberFormatException e) {
                            System.out.println("Nh·∫≠p s·ªë h·ª£p l·ªá.");
                        }

                    }
                    String selectedTime = timeSlots[choice - 1];
                    saveCourseRegistration(course.getCourseId(), selectedTime);
                    usedTimeSlots.add(selectedTime);
                    System.out.println("\nHo√†n t·∫•t ƒëƒÉng k√Ω c√°c kh√≥a h·ªçc ch∆∞a ƒëƒÉng k√Ω trong l·ªô tr√¨nh.");
                }
            }

            System.out.println("=======================================================\n");
        }
    }
    public void displayError(String errorMessage) {
        System.err.println("\n--- ƒê√É C√ì L·ªñI X·∫¢Y RA ---");
        System.err.println(errorMessage);
        System.err.println("========================\n");
    }

    private static void saveCourseRegistration(String id, String time) {
        try (PrintWriter out = new PrintWriter(new FileWriter("registered.txt", true))) {
            out.println(id + ";" + time);
        } catch (IOException e) {
            System.out.println("Kh√¥ng th·ªÉ l∆∞u ƒëƒÉng k√Ω kh√≥a h·ªçc " + id);
        }
    }

    private static Set<String> loadRegisteredCourseIds() {
        Set<String> ids = new HashSet<>();
        File file = new File("registered.txt");
        if (!file.exists()) return ids;

        try (Scanner sc = new Scanner(file)) {
            while (sc.hasNextLine()) {
                String line = sc.nextLine().trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(";");
                    if (parts.length >= 1) {
                        ids.add(parts[0]);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Kh√¥ng th·ªÉ ƒë·ªçc file ƒëƒÉng k√Ω.");
        }

        return ids;
    }

    private static Set<String> loadRegisteredTimeSlots() {
        Set<String> times = new HashSet<>();
        File file = new File("registered.txt");
        if (!file.exists()) return times;

        try (Scanner sc = new Scanner(file)) {
            while (sc.hasNextLine()) {
                String line = sc.nextLine().trim();
                if (!line.isEmpty()) {
                    String[] parts = line.split(";");
                    if (parts.length >= 2) {
                        times.add(parts[1]);
                    }
                }
            }
        } catch (IOException e) {
            System.out.println("Kh√¥ng th·ªÉ ƒë·ªçc file ƒëƒÉng k√Ω.");
        }

        return times;
    }
}